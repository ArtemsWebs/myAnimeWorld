datasource db {
  provider = "postgresql"
  url      = "postgresql://postgres:admin@localhost:5432/postgres?schema=public"
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

//  This is your Prisma schema file,
//  learn more about it in the docs: https:

model User {
  id             String    @id @default(cuid())
  email          String    @unique
  name           String?
  image          String?
  hashedPassword String?
  emailVerified  DateTime? @map("email_verified")
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  sessions       Session[] @relation(name: "SessionToUser")
  accounts       Account[] @relation(name: "AccountToUser")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @map("resfreshToken")
  access_token      String? @map("accessToken")
  expires_at        Int?    @map("expiresAt")
  token_type        String  @map("tokenType")
  created_at        Int?
  scope             String
  id_token          String?
  sessionState      String?
  user              User    @relation(name: "AccountToUser", fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(name: "SessionToUser", fields: [userId], references: [id])
}

model VerificationToken {
  id         String   @id @default(cuid())
  indetifier String
  token      String
  expires    DateTime
}

model Animes {
  id            Int         @id
  malId         Int
  title         String
  url           String?
  titleEnglish  String?
  titleJapanese String?
  source        String?
  episodes      Int?
  trailer       Json?
  status        String?
  airing        Boolean?
  rating        String?
  score         Int?
  scoredBy      Int?
  rank          Int?
  popularity    Int?
  members       Int?
  favorites     Int?
  synopsis      String?
  background    String?
  season        String?
  type          String?
  images        Json?
  videoUrl      String?
  thumbnaiUrl   String?
  duration      String?
  genres        Genres[]
  licensors     Licensors[]
  producers     Producers[]
  studios       Studios[]
}

model Genres {
  id     Int      @id @default(autoincrement())
  malId  Int
  type   String?
  name   String?
  url    String?
  animes Animes[]
}

model Licensors {
  id               Int      @id @default(autoincrement())
  malId            Int
  type             String
  name             String
  url              String
  animesId         String?
  licensorsAnimeId String?
  animes           Animes[]
}

model Producers {
  id       Int      @id @default(autoincrement())
  malId    Int
  type     String
  name     String
  url      String
  animesId String?
  animes   Animes[]
}

model Studios {
  id     Int      @id @default(autoincrement())
  malId  Int
  type   String
  name   String
  url    String
  animes Animes[]
}

model Dubbers {
  id          String   @id @default(cuid())
  description String
  persons     String[]
  logoUrl     String
}

enum Role {
  USER
  ADMIN
}
