datasource db {
  provider = "postgresql"
  url      = "postgresql://postgres:admin@localhost:5432/postgres?schema=public"
}

generator client {
  provider        = "prisma-client-js"
  binaryTargets   = ["native", "rhel-openssl-1.0.x"]
  previewFeatures = ["omitApi", "relationJoins"]
}

//  This is your Prisma schema file,
//  learn more about it in the docs: https:

model User {
  id             String      @id @default(cuid())
  email          String      @unique
  name           String
  image          String?
  hashedPassword String?
  emailVerified  DateTime?   @map("email_verified")
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  sessions       Session[]   @relation(name: "SessionToUser")
  accounts       Account[]   @relation(name: "AccountToUser")
  roles          Role[]      @relation(name: "UserToRoles")
  userImage      File?
  userInfoId     Int?
  UserInfo       UserInfo?
  UserFriend     UserFriend?
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @map("resfreshToken")
  access_token      String? @map("accessToken")
  expires_at        Int?    @map("expiresAt")
  token_type        String  @map("tokenType")
  created_at        Int?
  scope             String
  id_token          String?
  sessionState      String?
  user              User    @relation(name: "AccountToUser", fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(name: "SessionToUser", fields: [userId], references: [id])
}

model VerificationToken {
  id         String   @id @default(cuid())
  indetifier String
  token      String
  expires    DateTime
}

model Animes {
  id            Int         @id
  malId         Int
  title         String
  url           String?
  titleEnglish  String?
  titleJapanese String?
  source        String?
  episodes      Int?
  trailer       Json?
  status        String?
  airing        Boolean?
  rating        String?
  score         Int?
  scoredBy      Int?
  rank          Int?
  popularity    Int?
  members       Int?
  favorites     Int?
  synopsis      String?
  background    String?
  season        String?
  type          String?
  images        Json?
  videoUrl      String?
  thumbnaiUrl   String?
  duration      String?
  genres        Genres[]
  licensors     Licensors[]
  producers     Producers[]
  studios       Studios[]
  UserInfo      UserInfo?   @relation(fields: [userInfoId], references: [id])
  userInfoId    Int?
  File          File?       @relation(fields: [fileId], references: [id])
  fileId        Int?
}

model Genres {
  id     Int      @id @default(autoincrement())
  malId  Int
  type   String?
  name   String?
  url    String?
  animes Animes[]
}

model Licensors {
  id     Int      @id @default(autoincrement())
  malId  Int
  type   String
  name   String
  url    String
  animes Animes[]
}

model Producers {
  id     Int      @id @default(autoincrement())
  malId  Int
  type   String
  name   String
  url    String
  animes Animes[]
}

model Studios {
  id     Int      @id @default(autoincrement())
  malId  Int
  type   String
  name   String
  url    String
  animes Animes[]
}

model UserInfo {
  id               Int          @id @default(autoincrement())
  user             User?        @relation(fields: [userId], references: [id])
  userId           String?      @unique
  status           String?
  linkToTelegram   String?
  linkToInstagram  String?
  linkToVk         String?
  linkToFaceBook   String?
  watchingAnimes   Animes[]
  lastTimeOnSite   DateTime
  animesTokenCount Int
  UserFriend       UserFriend[]
}

model UserFriend {
  id         Int      @id @default(autoincrement())
  user       User?    @relation(fields: [userId], references: [id])
  userId     String?  @unique
  info       UserInfo @relation(fields: [userInfoId], references: [id])
  userInfoId Int
}

model Dubbers {
  id          String   @id @default(cuid())
  description String
  persons     String[]
  logoUrl     String
}

model Permission {
  id          Int      @id @default(autoincrement())
  name        String
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())
  roles       Role[]   @relation(name: "permissionToRole")
}

model Role {
  id            Int          @id @default(autoincrement())
  name          String       @unique
  description   String?
  isDefaultUser Boolean      @default(false)
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @default(now())
  permission    Permission[] @relation(name: "permissionToRole")
  User          User[]       @relation(name: "UserToRoles")
}

model File {
  id           Int      @id @default(autoincrement())
  bucket       String
  fileName     String   @unique
  originalName String
  size         Int
  user         User?    @relation(fields: [userId], references: [id])
  userId       String?  @unique
  Animes       Animes[]
}
